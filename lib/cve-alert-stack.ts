import * as cdk from '@aws-cdk/core';
import * as lambda from '@aws-cdk/aws-lambda-nodejs';
import * as iam from '@aws-cdk/aws-iam';
import { Rule, Schedule } from '@aws-cdk/aws-events';
import * as targets from '@aws-cdk/aws-events-targets';
import * as sns from '@aws-cdk/aws-sns';
import * as subscriptions from '@aws-cdk/aws-sns-subscriptions';

export class CveAlertStack extends cdk.Stack {
  constructor(scope: cdk.Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const snsTopic = new sns.Topic(this, 'cve-alert-topic');

    // Add your SNS subscriptions here

    // Example: E-Mail
    // snsTopic.addSubscription(new subscriptions.EmailSubscription('foo@bar.com'));

    // Example: SMS
    // snsTopic.addSubscription(new subscriptions.SmsSubscription('+15551231234'));

    // Example: HTTPS
    // snsTopic.addSubscription(new subscriptions.UrlSubscription('https://example.com/some/url'));

    // Example: AWS Lambda
    // snsTopic.addSubscription(new subscriptions.LambdaSubscription(someOtherLambdaFunction));
    

    const alertFunction = new lambda.NodejsFunction(this, 'cve-alert-function', {
      environment: {
        LOG_LEVEL: 'DEBUG',
        POWERTOOLS_SERVICE_NAME: "cve-alert-service",
        SNS_TOPIC_ARN: snsTopic.topicArn,
      }
    });

    alertFunction.role?.attachInlinePolicy(new iam.Policy(this,"update-function-configuration-policy",{
      statements: [
        new iam.PolicyStatement({
          actions: ["lambda:UpdateFunctionConfiguration"],
          resources: [alertFunction.functionArn]
        })
      ]
    }))

    snsTopic.grantPublish(alertFunction);

    new Rule(this, 'cve-alert-schedule', {
      schedule: Schedule.cron({ minute: '0' }),
      targets: [new targets.LambdaFunction(alertFunction)],
     });
     

  }
}
